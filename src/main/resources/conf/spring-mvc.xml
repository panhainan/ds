<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
      http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  
      http://www.springframework.org/schema/context  
      http://www.springframework.org/schema/context/spring-context-3.1.xsd  
      http://www.springframework.org/schema/mvc  
      http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">

	<!-- 注解扫描包 -->
	<context:component-scan base-package="com.ds.dreamstation.controller" />

	<!-- <context:component-scan /> -->
	<!-- 扫描指定的包中的类上的注解，常用的注解有： -->
	<!-- @Controller 声明Action组件 -->
	<!-- @Service 声明Service组件 @Service("xxxService") -->
	<!-- @Repository 声明Dao组件 -->
	<!-- @Component 泛指组件, 当不好归类时. -->
	<!-- @RequestMapping("/menu") 请求映射 -->
	<!-- @Resource 用于注入，( j2ee提供的 ) 默认按名称装配，@Resource(name="beanName") -->
	<!-- @Autowired 用于注入，(spring提供的) 默认按类型装配 -->
	<!-- @Transactional( rollbackFor={Exception.class}) 事务管理 -->
	<!-- @ResponseBody将内容或对象作为 HTTP 响应正文返回，并调用适合HttpMessageConverter的Adapter转换对象，写入输出流 -->
	<!-- @Scope("prototype") 设定bean的作用域 -->


	<!-- 开启MVC注解,表示SpringMVC支持注解功能 做了很多事情，不包括添加自己定义的拦截器 -->
	<mvc:annotation-driven />

	<!-- 拦截器 -->
	<mvc:interceptors>
		<!-- 多个拦截器,顺序执行 -->
		<mvc:interceptor>
			<!-- 如果不配置或/*,将拦截所有的Controller -->
			<mvc:mapping path="/manage/main/**" />
			<mvc:mapping path="/member/manage/**" />
			<mvc:mapping path="/member/self/**" />
			<mvc:mapping path="/news/manage/**" />
			<mvc:mapping path="/project/manage/**" />
			<mvc:mapping path="/message/manage/**" />
			<mvc:mapping path="/index/manage/**" />
			<mvc:mapping path="/studies/manage/**" />
			<bean class="com.ds.dreamstation.interceptor.OnlineInterceptor"></bean>
		</mvc:interceptor>
		<mvc:interceptor>
			<!-- 成员管理,首页管理,学习情况删除拦截器 -->
			<mvc:mapping path="/member/manage/**" />
			<mvc:mapping path="/index/manage/**" />
			<mvc:mapping path="/studies/manage/remove" />
			<bean class="com.ds.dreamstation.interceptor.MemberManageInterceptor"></bean>
		</mvc:interceptor>
		<mvc:interceptor>
			<!-- 发布新闻拦截器 -->
			<mvc:mapping path="/news/manage/go-add" />
			<mvc:mapping path="/news/manage/add" />
			<bean class="com.ds.dreamstation.interceptor.NewsPublishInterceptor"></bean>
		</mvc:interceptor>
		<mvc:interceptor>
			<!-- 管理新闻拦截器 -->
			<mvc:mapping path="/news/manage/go-edit" />
			<mvc:mapping path="/news/manage/edit" />
			<mvc:mapping path="/news/manage/remove" />
			<mvc:mapping path="/news/manage/removes" />
			<mvc:mapping path="/news/manage/list" />
			<mvc:mapping path="/news/manage/auditing" />
			<bean class="com.ds.dreamstation.interceptor.NewsManageInterceptor"></bean>
		</mvc:interceptor>
		<mvc:interceptor>
			<!-- 发布项目拦截器 -->
			<mvc:mapping path="/project/manage/go-add" />
			<mvc:mapping path="/project/manage/add" />
			<bean class="com.ds.dreamstation.interceptor.ProjectPublishInterceptor"></bean>
		</mvc:interceptor>
		<mvc:interceptor>
			<!-- 管理项目拦截器 -->
			<mvc:mapping path="/project/manage/go-edit" />
			<mvc:mapping path="/project/manage/edit" />
			<mvc:mapping path="/project/manage/remove" />
			<mvc:mapping path="/project/manage/removes" />
			<mvc:mapping path="/project/manage/list" />
			<mvc:mapping path="/project/manage/auditing" />
			<bean class="com.ds.dreamstation.interceptor.ProjectManageInterceptor"></bean>
		</mvc:interceptor>
		<mvc:interceptor>
			<!-- 回复留言拦截器 -->
			<mvc:mapping path="/message/manage/reply" />
			<mvc:mapping path="/message/manage/go-reply" />
			<bean class="com.ds.dreamstation.interceptor.MessageReplyInterceptor"></bean>
		</mvc:interceptor>
		<mvc:interceptor>
			<!-- 管理留言拦截器 -->
			<mvc:mapping path="/message/manage/remove" />
			<mvc:mapping path="/message/manage/removes" />
			<mvc:mapping path="/message/manage/list" />
			<bean class="com.ds.dreamstation.interceptor.MessageManageInterceptor"></bean>
		</mvc:interceptor>
	</mvc:interceptors>

	<!-- 方案一 （二选一）表示不对静态资源如CSS、JS、HTML等进行拦截 -->
	<!-- 当在web.xml 中 DispatcherServlet使用 <url-pattern>/</url-pattern> 映射时，能映射静态资源,使用默认的servlet来响应请求 -->
	<!-- <mvc:default-servlet-handler /> -->

	<!-- 方案二 （二选一） 静态资源映射 -->
	<mvc:resources mapping="/images/**" location="/WEB-INF/images/**" />
	<mvc:resources mapping="/img/**" location="/WEB-INF/img/**" />
	<mvc:resources mapping="/fonts/**" location="/WEB-INF/fonts/**" />
	<mvc:resources mapping="/css/**" location="/WEB-INF/css/**" />
	<mvc:resources mapping="/js/**" location="/WEB-INF/js/**" />
	<mvc:resources mapping="/html/**" location="/WEB-INF/html/**" />
	<mvc:resources mapping="/umeditor/**" location="/WEB-INF/umeditor/**" />
	<mvc:resources mapping="/upload/**" location="/upload/**" />
	<!-- 对模型视图添加前后缀 -->
	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver"
		p:prefix="/WEB-INF/" p:suffix=".jsp" /><!-- p:prefix="/WEB-INF/jsp/" -->

	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<bean
					class="org.springframework.http.converter.StringHttpMessageConverter">
					<property name="supportedMediaTypes">
						<list>
							<value>text/plain;charset=UTF-8</value>
						</list>
					</property>
				</bean>
			</list>
		</property>
	</bean>


	<!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射 -->
	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<bean
					class="org.springframework.http.converter.StringHttpMessageConverter">
					<property name="supportedMediaTypes">
						<list>
							<value>text/plain;charset=UTF-8</value>
						</list>
					</property>
				</bean>
				<bean
					class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
					<property name="supportedMediaTypes">
						<list>
							<value>application/json;charset=UTF-8</value>
						</list>
					</property>
				</bean>
			</list>
		</property>
	</bean>

	<!-- 上传文件拦截，设置最大上传文件大小 10M=10*1024*1024(B)=10485760 bytes -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="10485760" />
	</bean>

</beans>  